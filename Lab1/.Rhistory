library(readxl)
library(terra)
#Importación de librerías, readxl para leer archivos tipo XLSX
#terra para manejo de archivos con estructura espacial
library(readxl)
library(terra)
data_BPN = read_excel('dataCOL_BPN_2022.xlsx')
#Importación de librerías, readxl para leer archivos tipo XLSX
#terra para manejo de archivos con estructura espacial
library(readxl)
library(terra)
data_BPN = read_excel('dataCOL_BPN_2022.xlsx')
setwd("~/Documents/GitHub")
setwd("~/Documents/GitHub")
data_BPN = read_excel('dataCOL_BPN_2022.xlsx')
setwd("~/Documents/GitHub/Uniandes_IBIO4820_202410/Lab1")
setwd("~/Documents/GitHub/Uniandes_IBIO4820_202410/Lab1")
data_BPN = read_excel('dataCOL_BPN_2022.xlsx')
data_ProyPob = read_excel('dataCOL_ProyPob_2020_2050.xlsx')
View(data_ProyPob)
View(data_BPN)
View(data_ProyPob)
cwd()
getwd()
here()
install.packages("here")
here()
here()
library(here)
here()
??paste0
??file.path
here()
library(readxl)
library(terra)
library(rstudiapi)
install.packages("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
setwd(dirname(getActiveDocumentContext()$path))
library(rstudiapi)
setwd(dirname(getActiveDocumentContext()$path))
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
dirname(getActiveDocumentContext()$path)
data_BPN = read_excel('Data_Pob_COL//dataCOL_BPN_2022.xlsx')
data_ProyPob = read_excel('Data_Pob_COL//dataCOL_ProyPob_2020_2050.xlsx')
#Importación de librerías, readxl para leer archivos tipo XLSX
#terra para manejo de archivos con estructura espacial
#rstudioapi nos permite la utilización de rutas relativas
library(readxl)
library(terra)
library(rstudioapi)
#Fijar la ruta de trabajo al archivo actual
setwd(dirname(getActiveDocumentContext()$path))
data_ProyPob = read_excel('Data_Pob_COL//dataCOL_ProyPob_2020_2050.xlsx')
data_BPN = read_excel('Data_Pob_COL//dataCOL_BPN_2022.xlsx')
View(data_ProyPob)
#Visualizar datos cargados previamente
View(data_BPN)
View(data_ProyPob)
vect("Mapa_Depto_COL//MGN_DPTO_POLITICO.shp")
map_COL = vect("Mapa_Depto_COL//MGN_DPTO_POLITICO.shp")
plot(Map)
plot(map_COL)
#mostrar el Coordinated Reference System del mapa anterior
crs(map_COL)
#Visualizar el data frame asociado al mapa que cargamos
View(as.data.frame(map_COL))
map_COL$DPTO_CCDGO %in% data_BPN$`ID DANE`
#Aca usamos el vector de verdaderos y falsos para hacer un subs#set y
#saber que códigos del dane de nuestro DANE están en la base del SIVIGILA.
Map$DPTO_CCDGO[Map$DPTO_CCDGO %in% DatosBajoPesoAlNacer$`ID DANE`]
#Aca usamos el vector de verdaderos y falsos para hacer un subs#set y
#saber que códigos del dane de nuestro DANE están en la base del SIVIGILA.
map_COL$DPTO_CCDGO[Map$DPTO_CCDGO %in% DatosBajoPesoAlNacer$`ID DANE`]
#Aca usamos el vector de verdaderos y falsos para hacer un subs#set y
#saber que códigos del dane de nuestro DANE están en la base del SIVIGILA.
map_COL$DPTO_CCDGO[Map$DPTO_CCDGO %in% data_BPN$`ID DANE`]
#Aca usamos el vector de verdaderos y falsos para hacer un subs#set y
#saber que códigos del dane de nuestro DANE están en la base del SIVIGILA.
map_COL$DPTO_CCDGO[map_COL$DPTO_CCDGO %in% data_BPN$`ID DANE`]
#Inicializamos la columna
map_COL$CasosBajoPesoAlNacer=NA
#Hacemos el recorrido. El contador i va sobre los valores de la c#olumna del
#código del dane del mapa.
for (i in map_COL$DPTO_CCDGO){
map_COL$CasosBajoPesoAlNacer[map_COL$DPTO_CCDGO==i] = data_BPN$ CASOS[DatosBajoPesoAlNacer$`ID DANE`==i]
#Aca los corchetes nos permiten hacer el subset.
}
map_COL$CasosBajoPesoAlNacer[map_COL$DPTO_CCDGO==i] = data_BPN$ CASOS[data_BPN$`ID DANE`==i]
#Hacemos el recorrido. El contador i va sobre los valores de la c#olumna del
#código del dane del mapa.
for (i in map_COL$DPTO_CCDGO){
map_COL$CasosBajoPesoAlNacer[map_COL$DPTO_CCDGO==i] = data_BPN$ CASOS[data_BPN$`ID DANE`==i]
#Aca los corchetes nos permiten hacer el subset.
}
#Hacemos el plot
plot(map_COL,"CasosBajoPesoAlNacer",plg=list(title="CasosBajoPesoAlNacer"))
